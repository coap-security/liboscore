APPLICATION ?= test_$(notdir $(subst -,_,$(patsubst %/,%,$(CURDIR))))

RIOTBASE ?= $(CURDIR)/../RIOT

BOARD ?= native

DEVELHELP ?= 1

# C11 features are accepted in the OSCORE implementation, but that causes
# pedantic Werrors to show up in RIOT source; gnu11 seems to ignore those.
CFLAGS += -std=gnu11

EXTERNAL_MODULE_DIRS += $(abspath ../../..)/backends/riot-modules
USEMODULE += oscore

# Backend selection: Tinycrypt provides AES-CCM, HACL provides ChaCha
USEMODULE += libcose_crypt_hacl
USEMODULE += libcose_crypt_tinycrypt
# To enable tinydtls and thus HKDF support (along with a different AES-CCM
# implementation), RIOT needs to be patched to pull in a branch of it that
# includes code from https://github.com/bergzand/libcose/pull/91 and /94:
#
# Source and module mechanisms are selected by applying this patch:
#
# diff --git a/pkg/libcose/Makefile b/pkg/libcose/Makefile
# index 1fb4ee768f..73b1a64fe5 100644
# --- a/pkg/libcose/Makefile
# +++ b/pkg/libcose/Makefile
# @@ -2,2 +2,2 @@ PKG_NAME=libcose
# -PKG_URL=https://github.com/bergzand/libcose
# -PKG_VERSION=3fdf1238987b6aeec113b1872e56307893feeae7
# +PKG_URL=https://github.com/chrysn-pull-requests/libcose
# +PKG_VERSION=f4eb5b54c48a2985512bf9e83587bf7b2ec90fb4
# diff --git a/pkg/libcose/Makefile.dep b/pkg/libcose/Makefile.dep
# index ffd4e2c6ca..31e1733867 100644
# --- a/pkg/libcose/Makefile.dep
# +++ b/pkg/libcose/Makefile.dep
# @@ -15,0 +16,3 @@ endif
# +ifneq (,$(filter libcose_crypt_tinydtls,$(USEMODULE)))
# +  USEPKG += tinydtls
# +endif
# diff --git a/pkg/libcose/Makefile.include b/pkg/libcose/Makefile.include
# index 7342c0b07a..0b88760c9a 100644
# --- a/pkg/libcose/Makefile.include
# +++ b/pkg/libcose/Makefile.include
# @@ -12,0 +13,3 @@ endif
# +ifneq (,$(filter libcose_crypt_tinydtls,$(USEMODULE)))
# +  CFLAGS += -DCRYPTO_TINYDTLS
# +endif
#
# Then, this line can be added here:
#
#USEMODULE += libcose_crypt_tinydtls

ifeq (rust,${OSCORE_CRYPTO_BACKEND})
BASELIBS += ../../../rust/liboscore-cryptobackend-aead-standalone/target/i686-unknown-linux-gnu/debug/libliboscore_cryptobackend_aead_standalone.a

../../../rust/liboscore-cryptobackend-aead-standalone/target/i686-unknown-linux-gnu/debug/libliboscore_cryptobackend_aead_standalone.a:
	cd ../../rust/liboscore-cryptobackend-aead/ && cargo +nightly build --target=i686-unknown-linux-gnu
endif

# Some RNG needs to be selected for libcose
USEMODULE += prng_sha256prng

EXTERNAL_MODULE_DIRS += $(abspath ..)/

# libcose or rust; needs to be exported to be available to the build process of backends/riot-module/Makefile
export OSCORE_CRYPTO_BACKEND ?= libcose

ifeq (libcose,${OSCORE_CRYPTO_BACKEND})
# Pick a backend; without, no algorithms are available
#USEMODULE += libcose_crypt_monocypher
# That would offer AES-CCM algorithms, but using it requires changing the RIOT
# package to point to the branch at https://github.com/bergzand/libcose/pull/91
# until that is completed and a version including it has been mada available in
# RIOT.
#USEMODULE += libcose_crypt_tinydtls
endif

EXTERNAL_MODULE_DIRS += $(abspath ..)/testwrapper

TESTS = ../test-evaluator.sh

# workarounds for https://github.com/RIOT-OS/RIOT/issues/13121
USEMODULE += gnrc_sock
USEMODULE += gnrc_ipv6

include $(RIOTBASE)/Makefile.include
